{"version":3,"sources":["api/API.ts","utils/utils.ts","components/Question.tsx","App.tsx","index.tsx"],"names":["Difficulty","shuffleArray","array","index","length","swapIndex","Math","floor","random","temp","fetchQuestions","amountOfQuestion","difficulty","a","url","fetch","json","data","results","map","question","answers","incorrect_answers","correct_answer","Question","userAnswer","questionNumber","totalQuestions","correctAnswer","giveAnswer","handleCheckAnswer","className","dangerouslySetInnerHTML","__html","ans","key","disabled","value","onClick","App","useState","loading","setLoading","questions","setQuestions","quesNumber","setQuesNumber","setUserAnswer","score","setScore","gameOver","setGameOver","isClicked","setIsClicked","startQuiz","EASY","newQuestions","console","log","evt","answer","currentTarget","correctAns","previous_score","userAns","isCorrect","previous","TOTAL_QUESTION","nextQuestionNumber","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.68500ef2.chunk.js","sourcesContent":["import { shuffleArray } from \"./../utils/utils\";\n\nexport type Questions = {\n  category: string;\n  difficulty: string;\n  type: string;\n  question: string;\n  correct_answer: string;\n  incorrect_answers: string[];\n};\n\nexport type QuestionState = Questions & { answers: string[] };\n\nexport enum Difficulty {\n  EASY = \"easy\",\n  MEDIUM = \"medium\",\n  HARD = \"hard\",\n}\n\nexport const fetchQuestions = async (\n  amountOfQuestion: number,\n  difficulty: Difficulty\n) => {\n  const url = `https://opentdb.com/api.php?amount=${amountOfQuestion}&difficulty=${difficulty}&type=multiple`;\n\n  const data = await (await fetch(url)).json();\n  return data.results.map((question: Questions) => {\n    return {\n      ...question,\n      answers: shuffleArray([\n        ...question.incorrect_answers,\n        question.correct_answer,\n      ]),\n    };\n  });\n};\n","export const shuffleArray = (array: any[]) => {\n  for (let index = array.length - 1; index > 0; index--) {\n    const swapIndex = Math.floor(Math.random() * index);\n\n    const temp = array[index];\n    array[index] = array[swapIndex];\n    array[swapIndex] = temp;\n  }\n  return array;\n};\n","import React from \"react\";\nimport { UserAnswer } from \"../App\";\n\nexport interface Props {\n  question: string;\n  answers: string[];\n  userAnswer: UserAnswer | undefined;\n  questionNumber: number;\n  totalQuestions: number;\n  correctAnswer: string;\n  giveAnswer: boolean;\n  handleCheckAnswer: (evt: React.MouseEvent<HTMLButtonElement>) => void;\n}\n\nconst Question: React.FC<Props> = ({\n  question,\n  answers,\n  userAnswer,\n  questionNumber,\n  totalQuestions,\n  correctAnswer,\n  giveAnswer,\n  handleCheckAnswer,\n}) => {\n  return (\n    <div className=\"bg-pink-100 tracking-wide p-4\">\n      <p className=\"font-bold uppercase mb-3 text-pink-700\">\n        Questions: {questionNumber} / {totalQuestions}\n      </p>\n      <p className=\"mb-3  \" dangerouslySetInnerHTML={{ __html: question }} />\n      <div>\n        {answers.map((ans) => {\n          return (\n            <div key={ans}>\n              <button\n                className=\"shadow-outline py-1 px-4 my-4 rounded-full block w-full\"\n                disabled={userAnswer ? true : false}\n                value={ans}\n                onClick={handleCheckAnswer}\n              >\n                <span dangerouslySetInnerHTML={{ __html: ans }} />\n              </button>\n            </div>\n          );\n        })}\n      </div>\n      {giveAnswer ? (\n        <span className=\"text-pink-700 tracking-wide\">\n          Correct answer: {correctAnswer}\n        </span>\n      ) : null}\n    </div>\n  );\n};\n\nexport default Question;\n","import React, { useState } from \"react\";\nimport { fetchQuestions, Difficulty, QuestionState } from \"./api/API\";\nimport Question from \"./components/Question\";\n\nconst TOTAL_QUESTION = 15;\n\nexport interface UserAnswer {\n  question: string;\n  answer: string;\n  isCorrect: boolean;\n  correctAnswer: string;\n}\n\nconst App = () => {\n  const [loading, setLoading] = useState(true);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [quesNumber, setQuesNumber] = useState(0);\n  const [userAnswer, setUserAnswer] = useState<UserAnswer[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n  const [isClicked, setIsClicked] = useState(false);\n\n  const startQuiz = async () => {\n    setLoading(true);\n    setGameOver(false);\n\n    try {\n      const newQuestions = await fetchQuestions(\n        TOTAL_QUESTION,\n        Difficulty.EASY\n      );\n      setQuestions(newQuestions);\n    } catch (error) {\n      console.log(error);\n    }\n\n    setScore(0);\n    setUserAnswer([]);\n    setQuesNumber(0);\n    setLoading(false);\n  };\n\n  const checkAnswer = (evt: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      const answer = evt.currentTarget.value;\n      const correctAns = questions[quesNumber].correct_answer === answer;\n      if (correctAns) {\n        setScore((previous_score) => previous_score + 1);\n      }\n\n      const userAns = {\n        question: questions[quesNumber].question,\n        answer: answer,\n        isCorrect: correctAns,\n        correctAnswer: questions[quesNumber].correct_answer,\n      };\n\n      setUserAnswer((previous) => [...previous, userAns]);\n      setIsClicked(true);\n    }\n  };\n\n  const nextQuestion = () => {\n    setIsClicked(false);\n    const nextQuestionNumber = quesNumber + 1;\n    if (nextQuestionNumber === TOTAL_QUESTION) {\n      setGameOver(true);\n    } else {\n      setQuesNumber(nextQuestionNumber);\n    }\n  };\n  return (\n    <div className=\"bg-gray-100 w-10/12 md:w-2/4 h-full p-4 my-4 m-auto shadow-sm rounded-sm\">\n      <header>\n        <h1 className=\"font-bold text-2xl text-center uppercase text-gray-800\">\n          Pop Quiz\n        </h1>\n        {gameOver || userAnswer.length === TOTAL_QUESTION ? (\n          <button\n            onClick={startQuiz}\n            className=\"btn bg-purple-600 text-purple-100 border-purple-200  focus:shadow-outline  hover:bg-purple-400 hover:text-purple-700 transform hover:translate-y-1\"\n          >\n            Start Quiz\n          </button>\n        ) : null}\n        {!gameOver ? (\n          <p className=\"bg-blue-100 p-4 my-4 text-blue-700 font-bold tracking-widest rounded-lg\">\n            Score: {score}\n          </p>\n        ) : null}\n      </header>\n      <main>\n        {loading ? (\n          <p className=\"tracking-widest animate-pulse text-gray-700\">\n            Loading question...\n          </p>\n        ) : null}\n        {!loading && !gameOver ? (\n          <Question\n            questionNumber={quesNumber + 1}\n            totalQuestions={TOTAL_QUESTION}\n            question={questions[quesNumber].question}\n            answers={questions[quesNumber].answers}\n            userAnswer={userAnswer[quesNumber]}\n            correctAnswer={questions[quesNumber].correct_answer}\n            giveAnswer={isClicked}\n            handleCheckAnswer={checkAnswer}\n          />\n        ) : null}\n        {!gameOver &&\n        !loading &&\n        userAnswer.length === quesNumber + 1 &&\n        quesNumber !== TOTAL_QUESTION - 1 ? (\n          <button\n            className=\"btn bg-indigo-700 text-indigo-100 border-indigo-200 focus:shadow-outline  hover:bg-indigo-400 hover:text-indigo-700 transform hover:translate-y-1\"\n            onClick={nextQuestion}\n          >\n            Next Question\n          </button>\n        ) : null}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}